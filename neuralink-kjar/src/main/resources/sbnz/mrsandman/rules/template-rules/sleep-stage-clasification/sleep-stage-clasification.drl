package cepneuralink;
import sbnz.mrsandman.neuralinkapp.model.*;
import sbnz.mrsandman.neuralinkapp.model.enums.SleepPhase;
import sbnz.mrsandman.neuralinkapp.model.events.*;

rule "Categorize Sleep_5 - No initial sleep stage"
no-loop true
when
	$s: Sleep()
	Number(intValue >= 100) from accumulate (
		$b: BrainWaveEvent(frequency >= 65, frequency <= 90),
		count($b)
	)
	not (
		SleepStage()
	)
then
	System.out.println("Aktivacija detekcije faze SleepPhase.REM without initial stage");
	insert(new SleepStage($s, SleepPhase.REM, new java.util.Date(drools.getWorkingMemory().getSessionClock().getCurrentTime())));
    insert(new SleepPhaseEvent(SleepPhase.REM));
    
end
rule "Categorize Sleep_5 - With initial sleep stage"
no-loop true
when
	$s: Sleep()
	$stage: SleepStage(endTime == null, sleep == $s, sleepPhase != SleepPhase.REM)
	Number(intValue >= 100) from accumulate (
		$b: BrainWaveEvent(frequency >= 65, frequency <= 90),
		count($b)
	)
then
	System.out.println("Aktivacija detekcije faze SleepPhase.REM with initial stage");
	modify ($stage) {
		setEndTime(new java.util.Date(drools.getWorkingMemory().getSessionClock().getCurrentTime()));
	}
	insert(new SleepStage($s, SleepPhase.REM, new java.util.Date(drools.getWorkingMemory().getSessionClock().getCurrentTime())));
    insert(new SleepPhaseEvent(SleepPhase.REM));
    
end

rule "Categorize Sleep_4 - No initial sleep stage"
no-loop true
when
	$s: Sleep()
	Number(intValue >= 100) from accumulate (
		$b: BrainWaveEvent(frequency >= 50, frequency <= 65),
		count($b)
	)
	not (
		SleepStage()
	)
then
	System.out.println("Aktivacija detekcije faze SleepPhase.PHASE4 without initial stage");
	insert(new SleepStage($s, SleepPhase.PHASE4, new java.util.Date(drools.getWorkingMemory().getSessionClock().getCurrentTime())));
    insert(new SleepPhaseEvent(SleepPhase.PHASE4));
    
end
rule "Categorize Sleep_4 - With initial sleep stage"
no-loop true
when
	$s: Sleep()
	$stage: SleepStage(endTime == null, sleep == $s, sleepPhase != SleepPhase.PHASE4)
	Number(intValue >= 100) from accumulate (
		$b: BrainWaveEvent(frequency >= 50, frequency <= 65),
		count($b)
	)
then
	System.out.println("Aktivacija detekcije faze SleepPhase.PHASE4 with initial stage");
	modify ($stage) {
		setEndTime(new java.util.Date(drools.getWorkingMemory().getSessionClock().getCurrentTime()));
	}
	insert(new SleepStage($s, SleepPhase.PHASE4, new java.util.Date(drools.getWorkingMemory().getSessionClock().getCurrentTime())));
    insert(new SleepPhaseEvent(SleepPhase.PHASE4));
    
end

rule "Categorize Sleep_3 - No initial sleep stage"
no-loop true
when
	$s: Sleep()
	Number(intValue >= 100) from accumulate (
		$b: BrainWaveEvent(frequency >= 37.5, frequency <= 50),
		count($b)
	)
	not (
		SleepStage()
	)
then
	System.out.println("Aktivacija detekcije faze SleepPhase.PHASE3 without initial stage");
	insert(new SleepStage($s, SleepPhase.PHASE3, new java.util.Date(drools.getWorkingMemory().getSessionClock().getCurrentTime())));
    insert(new SleepPhaseEvent(SleepPhase.PHASE3));
    
end
rule "Categorize Sleep_3 - With initial sleep stage"
no-loop true
when
	$s: Sleep()
	$stage: SleepStage(endTime == null, sleep == $s, sleepPhase != SleepPhase.PHASE3)
	Number(intValue >= 100) from accumulate (
		$b: BrainWaveEvent(frequency >= 37.5, frequency <= 50),
		count($b)
	)
then
	System.out.println("Aktivacija detekcije faze SleepPhase.PHASE3 with initial stage");
	modify ($stage) {
		setEndTime(new java.util.Date(drools.getWorkingMemory().getSessionClock().getCurrentTime()));
	}
	insert(new SleepStage($s, SleepPhase.PHASE3, new java.util.Date(drools.getWorkingMemory().getSessionClock().getCurrentTime())));
    insert(new SleepPhaseEvent(SleepPhase.PHASE3));
    
end

rule "Categorize Sleep_2 - No initial sleep stage"
no-loop true
when
	$s: Sleep()
	Number(intValue >= 100) from accumulate (
		$b: BrainWaveEvent(frequency >= 25, frequency <= 37.5),
		count($b)
	)
	not (
		SleepStage()
	)
then
	System.out.println("Aktivacija detekcije faze SleepPhase.PHASE2 without initial stage");
	insert(new SleepStage($s, SleepPhase.PHASE2, new java.util.Date(drools.getWorkingMemory().getSessionClock().getCurrentTime())));
    insert(new SleepPhaseEvent(SleepPhase.PHASE2));
    
end
rule "Categorize Sleep_2 - With initial sleep stage"
no-loop true
when
	$s: Sleep()
	$stage: SleepStage(endTime == null, sleep == $s, sleepPhase != SleepPhase.PHASE2)
	Number(intValue >= 100) from accumulate (
		$b: BrainWaveEvent(frequency >= 25, frequency <= 37.5),
		count($b)
	)
then
	System.out.println("Aktivacija detekcije faze SleepPhase.PHASE2 with initial stage");
	modify ($stage) {
		setEndTime(new java.util.Date(drools.getWorkingMemory().getSessionClock().getCurrentTime()));
	}
	insert(new SleepStage($s, SleepPhase.PHASE2, new java.util.Date(drools.getWorkingMemory().getSessionClock().getCurrentTime())));
    insert(new SleepPhaseEvent(SleepPhase.PHASE2));
    
end

rule "Categorize Sleep_1 - No initial sleep stage"
no-loop true
when
	$s: Sleep()
	Number(intValue >= 100) from accumulate (
		$b: BrainWaveEvent(frequency >= 15, frequency <= 25),
		count($b)
	)
	not (
		SleepStage()
	)
then
	System.out.println("Aktivacija detekcije faze SleepPhase.PHASE1 without initial stage");
	insert(new SleepStage($s, SleepPhase.PHASE1, new java.util.Date(drools.getWorkingMemory().getSessionClock().getCurrentTime())));
    insert(new SleepPhaseEvent(SleepPhase.PHASE1));
    
end
rule "Categorize Sleep_1 - With initial sleep stage"
no-loop true
when
	$s: Sleep()
	$stage: SleepStage(endTime == null, sleep == $s, sleepPhase != SleepPhase.PHASE1)
	Number(intValue >= 100) from accumulate (
		$b: BrainWaveEvent(frequency >= 15, frequency <= 25),
		count($b)
	)
then
	System.out.println("Aktivacija detekcije faze SleepPhase.PHASE1 with initial stage");
	modify ($stage) {
		setEndTime(new java.util.Date(drools.getWorkingMemory().getSessionClock().getCurrentTime()));
	}
	insert(new SleepStage($s, SleepPhase.PHASE1, new java.util.Date(drools.getWorkingMemory().getSessionClock().getCurrentTime())));
    insert(new SleepPhaseEvent(SleepPhase.PHASE1));
    
end

rule "Categorize Sleep_0 - No initial sleep stage"
no-loop true
when
	$s: Sleep()
	Number(intValue >= 100) from accumulate (
		$b: BrainWaveEvent(frequency >= 0, frequency <= 15),
		count($b)
	)
	not (
		SleepStage()
	)
then
	System.out.println("Aktivacija detekcije faze SleepPhase.AWAKE without initial stage");
	insert(new SleepStage($s, SleepPhase.AWAKE, new java.util.Date(drools.getWorkingMemory().getSessionClock().getCurrentTime())));
    insert(new SleepPhaseEvent(SleepPhase.AWAKE));
    
end
rule "Categorize Sleep_0 - With initial sleep stage"
no-loop true
when
	$s: Sleep()
	$stage: SleepStage(endTime == null, sleep == $s, sleepPhase != SleepPhase.AWAKE)
	Number(intValue >= 100) from accumulate (
		$b: BrainWaveEvent(frequency >= 0, frequency <= 15),
		count($b)
	)
then
	System.out.println("Aktivacija detekcije faze SleepPhase.AWAKE with initial stage");
	modify ($stage) {
		setEndTime(new java.util.Date(drools.getWorkingMemory().getSessionClock().getCurrentTime()));
	}
	insert(new SleepStage($s, SleepPhase.AWAKE, new java.util.Date(drools.getWorkingMemory().getSessionClock().getCurrentTime())));
    insert(new SleepPhaseEvent(SleepPhase.AWAKE));
    
end


