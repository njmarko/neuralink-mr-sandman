package cepneuralink;
global sbnz.mrsandman.neuralinkapp.bus.EventBus eventBus;
import sbnz.mrsandman.neuralinkapp.model.enums.SignalType;
import sbnz.mrsandman.neuralinkapp.model.events.*;
import sbnz.mrsandman.neuralinkapp.model.events.alcohol.*;
import sbnz.mrsandman.neuralinkapp.model.events.heartrate.*;
import sbnz.mrsandman.neuralinkapp.model.events.caffeine.*;
import sbnz.mrsandman.neuralinkapp.model.events.temperature.*;
import sbnz.mrsandman.neuralinkapp.model.events.light.*;
import java.util.Date;

rule "Categorize Signal_6 - LIGHT_LEVEL between 1000 and 100 and insert new BrightLightEvent"
	no-loop true
	when
		s1: SignalEvent(signalType == SignalType.LIGHT_LEVEL, value >= 1000, value < 100)
	    Number(intValue >= 3) from accumulate(
	    	s2: SignalEvent(
	    		this != s1,
	    		signalType == SignalType.LIGHT_LEVEL,
	    		value >= 1000,
	    		value < 100,
	    		this meets[60s] s1
	    	),
	    	count(s2) 
	    )
	    $avg_val: Double() from accumulate(
	    	s2: SignalEvent(
	    		$val: value,
	    		this != s1,
	    		signalType == SignalType.LIGHT_LEVEL,
	    		value >= 1000,
	    		value < 100,
	    		this meets[60s] s1
	    	),
	    	average($val) 
	    )
        not(
            BrightLightEvent() 
            over window:time(60s)
        )
	then
		System.out.println("Detekcija promene singala SignalType.LIGHT_LEVEL - BrightLightEvent");
		insert(new BrightLightEvent($avg_val));
	end

rule "Categorize Signal_5 - TEMPERATURE between 0 and 36 and insert new LoweredTemperatureEvent"
	no-loop true
	when
		s1: SignalEvent(signalType == SignalType.TEMPERATURE, value >= 0, value < 36)
	    Number(intValue >= 100) from accumulate(
	    	s2: SignalEvent(
	    		this != s1,
	    		signalType == SignalType.TEMPERATURE,
	    		value >= 0,
	    		value < 36,
	    		this meets[60s] s1
	    	),
	    	count(s2) 
	    )
	    $avg_val: Double() from accumulate(
	    	s2: SignalEvent(
	    		$val: value,
	    		this != s1,
	    		signalType == SignalType.TEMPERATURE,
	    		value >= 0,
	    		value < 36,
	    		this meets[60s] s1
	    	),
	    	average($val) 
	    )
        not(
            LoweredTemperatureEvent() 
            over window:time(60s)
        )
	then
		System.out.println("Detekcija promene singala SignalType.TEMPERATURE - LoweredTemperatureEvent");
		insert(new LoweredTemperatureEvent($avg_val));
	end

rule "Categorize Signal_4 - TEMPERATURE between 38 and 100 and insert new RaisedTemperatureEvent"
	no-loop true
	when
		s1: SignalEvent(signalType == SignalType.TEMPERATURE, value >= 38, value < 100)
	    Number(intValue >= 3) from accumulate(
	    	s2: SignalEvent(
	    		this != s1,
	    		signalType == SignalType.TEMPERATURE,
	    		value >= 38,
	    		value < 100,
	    		this meets[60s] s1
	    	),
	    	count(s2) 
	    )
	    $avg_val: Double() from accumulate(
	    	s2: SignalEvent(
	    		$val: value,
	    		this != s1,
	    		signalType == SignalType.TEMPERATURE,
	    		value >= 38,
	    		value < 100,
	    		this meets[60s] s1
	    	),
	    	average($val) 
	    )
        not(
            RaisedTemperatureEvent() 
            over window:time(60s)
        )
	then
		System.out.println("Detekcija promene singala SignalType.TEMPERATURE - RaisedTemperatureEvent");
		insert(new RaisedTemperatureEvent($avg_val));
	end

rule "Categorize Signal_3 - CAFFEINE_LEVEL between 20 and 100 and insert new RaisedCaffeineLevelEvent"
	no-loop true
	when
		s1: SignalEvent(signalType == SignalType.CAFFEINE_LEVEL, value >= 20, value < 100)
	    Number(intValue >= 3) from accumulate(
	    	s2: SignalEvent(
	    		this != s1,
	    		signalType == SignalType.CAFFEINE_LEVEL,
	    		value >= 20,
	    		value < 100,
	    		this meets[10s] s1
	    	),
	    	count(s2) 
	    )
	    $avg_val: Double() from accumulate(
	    	s2: SignalEvent(
	    		$val: value,
	    		this != s1,
	    		signalType == SignalType.CAFFEINE_LEVEL,
	    		value >= 20,
	    		value < 100,
	    		this meets[10s] s1
	    	),
	    	average($val) 
	    )
        not(
            RaisedCaffeineLevelEvent() 
            over window:time(10s)
        )
	then
		System.out.println("Detekcija promene singala SignalType.CAFFEINE_LEVEL - RaisedCaffeineLevelEvent");
		insert(new RaisedCaffeineLevelEvent($avg_val));
	end

rule "Categorize Signal_2 - HEART_BEAT between 1 and 50 and insert new HeartRateLoweredEvent"
	no-loop true
	when
		s1: SignalEvent(signalType == SignalType.HEART_BEAT, value >= 1, value < 50)
	    Number(intValue >= 100) from accumulate(
	    	s2: SignalEvent(
	    		this != s1,
	    		signalType == SignalType.HEART_BEAT,
	    		value >= 1,
	    		value < 50,
	    		this meets[60s] s1
	    	),
	    	count(s2) 
	    )
	    $avg_val: Double() from accumulate(
	    	s2: SignalEvent(
	    		$val: value,
	    		this != s1,
	    		signalType == SignalType.HEART_BEAT,
	    		value >= 1,
	    		value < 50,
	    		this meets[60s] s1
	    	),
	    	average($val) 
	    )
        not(
            HeartRateLoweredEvent() 
            over window:time(60s)
        )
	then
		System.out.println("Detekcija promene singala SignalType.HEART_BEAT - HeartRateLoweredEvent");
		insert(new HeartRateLoweredEvent($avg_val));
	end

rule "Categorize Signal_1 - HEART_BEAT between 50 and 100 and insert new HeartRateIncreasedEvent"
	no-loop true
	when
		s1: SignalEvent(signalType == SignalType.HEART_BEAT, value >= 50, value < 100)
	    Number(intValue >= 100) from accumulate(
	    	s2: SignalEvent(
	    		this != s1,
	    		signalType == SignalType.HEART_BEAT,
	    		value >= 50,
	    		value < 100,
	    		this meets[60s] s1
	    	),
	    	count(s2) 
	    )
	    $avg_val: Double() from accumulate(
	    	s2: SignalEvent(
	    		$val: value,
	    		this != s1,
	    		signalType == SignalType.HEART_BEAT,
	    		value >= 50,
	    		value < 100,
	    		this meets[60s] s1
	    	),
	    	average($val) 
	    )
        not(
            HeartRateIncreasedEvent() 
            over window:time(60s)
        )
	then
		System.out.println("Detekcija promene singala SignalType.HEART_BEAT - HeartRateIncreasedEvent");
		insert(new HeartRateIncreasedEvent($avg_val));
	end

rule "Categorize Signal_0 - ALCOHOL_LEVEL between 0.2 and 100.0 and insert new RaisedAlcoholLevelEvent"
	no-loop true
	when
		s1: SignalEvent(signalType == SignalType.ALCOHOL_LEVEL, value >= 0.2, value < 100.0)
	    Number(intValue >= 3) from accumulate(
	    	s2: SignalEvent(
	    		this != s1,
	    		signalType == SignalType.ALCOHOL_LEVEL,
	    		value >= 0.2,
	    		value < 100.0,
	    		this meets[60s] s1
	    	),
	    	count(s2) 
	    )
	    $avg_val: Double() from accumulate(
	    	s2: SignalEvent(
	    		$val: value,
	    		this != s1,
	    		signalType == SignalType.ALCOHOL_LEVEL,
	    		value >= 0.2,
	    		value < 100.0,
	    		this meets[60s] s1
	    	),
	    	average($val) 
	    )
        not(
            RaisedAlcoholLevelEvent() 
            over window:time(60s)
        )
	then
		System.out.println("Detekcija promene singala SignalType.ALCOHOL_LEVEL - RaisedAlcoholLevelEvent");
		insert(new RaisedAlcoholLevelEvent($avg_val));
	end


