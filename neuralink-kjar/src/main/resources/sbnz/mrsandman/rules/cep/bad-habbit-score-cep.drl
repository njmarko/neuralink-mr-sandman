package cepneuralink;

import sbnz.mrsandman.neuralinkapp.model.events.alcohol.*;
import sbnz.mrsandman.neuralinkapp.model.events.heartrate.*;
import sbnz.mrsandman.neuralinkapp.model.events.temperature.*;
import sbnz.mrsandman.neuralinkapp.model.events.physicalactivity.*;
import sbnz.mrsandman.neuralinkapp.model.events.caffeine.*;
import sbnz.mrsandman.neuralinkapp.model.events.light.*;
import sbnz.mrsandman.neuralinkapp.model.events.*;
import sbnz.mrsandman.neuralinkapp.model.enums.*;
import sbnz.mrsandman.neuralinkapp.model.*;
import java.time.LocalTime;
import java.util.Date;
import java.time.Duration;
import java.time.LocalDateTime;

rule "Raised alcohol level 4 hours before sleep score based time proximity and average value"
	no-loop
    when       
        $spe: SleepPhaseEvent(sleepPhase != SleepPhase.AWAKE)
        $u:User($opt_time: optimalSleepTime)
       	Number(intValue >=1) from accumulate(
        	$var1: AlcoholBeforeSleepEvent(
    			this meets[6h] $spe
        	),
        	count($var1)
        )
       	$avg_time: Double() from accumulate(
        	$var2: AlcoholBeforeSleepEvent(
        		$val: value,
        		$t: timeStamp,
    			this meets[6h] $spe
        	),
        	average(Duration.between($t.toLocalTime(), $opt_time).toMinutes())
        )
       	$avg_val: Double() from accumulate(
        	$var3: AlcoholBeforeSleepEvent(
        		$val: value,
    			this meets[6h] $spe
        	),
        	average($val)
        )        
        not(
            BadHabbit(badHabbitType == BadHabbitType.ALCOHOL) 
            over window:time(6h)
        )
    then
    	System.out.printf("Adding bad habbit score for alcohol %f\n", (1 - ($avg_time / (6.0*60.0))) * ($avg_val/2.0));
        insert(
        	new BadHabbit(
	        	BadHabbitType.ALCOHOL, 
	        	LocalDateTime.now(), 
	        	new Double( (1 - ($avg_time / (6.0*60.0))) * ($avg_val/2.0))
        	)
        );
end


rule "Raised physical activity 2 hours before sleep score based time proximity and average temperature"
	no-loop
    when       
        $spe: SleepPhaseEvent(sleepPhase != SleepPhase.AWAKE)
        $u:User($opt_time: optimalSleepTime)
       	Number(intValue >=1) from accumulate(
        	$var1: PhysicalActivityEvent(
    			this meets[2h] $spe
        	),
        	count($var1)
        )
       	$avg_time: Double() from accumulate(
        	$var2: PhysicalActivityEvent(
        		$val: value,
        		$t: timeStamp,
    			this meets[6h] $spe
        	),
        	average(Duration.between($t.toLocalTime(), $opt_time).toMinutes())
        )
       	$avg_val: Double() from accumulate(
        	$var3: PhysicalActivityEvent(
        		$val: value,
    			this meets[6h] $spe
        	),
        	average($val)
        )        
        not(
            BadHabbit(badHabbitType == BadHabbitType.INTENSE_PHYSICAL_ACTIVITY) 
            over window:time(6h)
        )
    then
    	System.out.printf("Adding bad habbit score for physical activity %f\n", (1 - ($avg_time / (2.0*60.0))) * ($avg_val / 37.0));
        insert(
        	new BadHabbit(
	        	BadHabbitType.ALCOHOL, 
	        	LocalDateTime.now(), 
	        	new Double( (1 - ($avg_time / (2.0*60.0))) * ($avg_val / 37.0))
        	)
        );
end

rule "Raised light level 2 hours before sleep score based time proximity and average lux"
	no-loop
    when       
        $spe: SleepPhaseEvent(sleepPhase != SleepPhase.AWAKE)
        $u:User($opt_time: optimalSleepTime)
       	Number(intValue >=1) from accumulate(
        	$var1: BrightLightBeforeSleepEvent(
    			this meets[2h] $spe
        	),
        	count($var1)
        )
       	$avg_time: Double() from accumulate(
        	$var2: BrightLightBeforeSleepEvent(
        		$val: value,
        		$t: timeStamp,
    			this meets[6h] $spe
        	),
        	average(Duration.between($t.toLocalTime(), $opt_time).toMinutes())
        )
       	$avg_val: Double() from accumulate(
        	$var3: BrightLightBeforeSleepEvent(
        		$val: value,
    			this meets[6h] $spe
        	),
        	average($val)
        )        
        not(
            BadHabbit(badHabbitType == BadHabbitType.BRIGHT_LIGHT_EXPOSURE) 
            over window:time(6h)
        )
    then
    	System.out.printf("Adding bad habbit score for bright light %f\n", (1 - ($avg_time / (2.0*60.0))) * ($avg_val / 1000.0));
        insert(
        	new BadHabbit(
	        	BadHabbitType.ALCOHOL, 
	        	LocalDateTime.now(), 
	        	new Double( (1 - ($avg_time / (2.0*60.0))) * ($avg_val / 1000.0))
        	)
        );
end