template header
badHabitType
causeEventName
timePeriod
timeUnit
timeUnitValue
expectedValue


package cepneuralink;

global sbnz.mrsandman.neuralinkapp.bus.EventBus eventBus;

import sbnz.mrsandman.neuralinkapp.model.events.alcohol.*;
import sbnz.mrsandman.neuralinkapp.model.events.heartrate.*;
import sbnz.mrsandman.neuralinkapp.model.events.temperature.*;
import sbnz.mrsandman.neuralinkapp.model.events.physicalactivity.*;
import sbnz.mrsandman.neuralinkapp.model.events.caffeine.*;
import sbnz.mrsandman.neuralinkapp.model.events.light.*;
import sbnz.mrsandman.neuralinkapp.model.events.beginsleeping.*;
import sbnz.mrsandman.neuralinkapp.model.events.*;
import sbnz.mrsandman.neuralinkapp.model.enums.*;
import sbnz.mrsandman.neuralinkapp.model.*;
import java.time.LocalTime;
import java.util.Date;
import java.time.Duration;
import java.time.LocalDateTime;

template "bad-habit-score-template"

rule "Raised @{badHabitType} level @{timePeriod}@{timeUnit} before sleep score based on time proximity and average value"
	no-loop true
    when       
        spe: BeginSleepingEvent()
        u:User(opt_time: optimalSleepTime)
       	Number(intValue >=1) from accumulate(
        	var1: @{causeEventName}(
    			this meets[@{timePeriod}@{timeUnit}] spe
        	),
        	count(var1)
        )
       	avg_time: Double() from accumulate(
        	var2: @{causeEventName}(
        		val: value,
        		t: timeStamp,
    			this meets[@{timePeriod}@{timeUnit}] spe
        	),
        	average(Duration.between(t.toLocalTime(), opt_time).toMinutes())
        )
       	avg_val: Double() from accumulate(
        	var3: @{causeEventName}(
        		val: value,
    			this meets[@{timePeriod}@{timeUnit}] spe
        	),
        	average(val)
        )        
        not(
            BadHabbit(badHabbitType == BadHabbitType.@{badHabitType}) 
            over window:time(6h)
        )
    then
    	System.out.printf("Adding bad habit score for @{badHabitType} %f\n", (1 - (avg_time / (@{timePeriod}*@{timeUnitValue}))) * (avg_val/@{expectedValue}));
        insert(
        	new BadHabbit(
	        	BadHabbitType.@{badHabitType}, 
	        	LocalDateTime.ofInstant(Instant.ofEpochMilli(drools.getWorkingMemory().getSessionClock().getCurrentTime()), ZoneId.systemDefault()), 
	        	new Double( (1 - (avg_time / (@{timePeriod}*@{timeUnitValue}))) * (avg_val/@{expectedValue}))
        	)
        );
	end
end template