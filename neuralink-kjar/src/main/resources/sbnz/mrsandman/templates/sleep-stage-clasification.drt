template header
minFrequency
maxFrequency
sleepPhase

package cepneuralink;

import sbnz.mrsandman.neuralinkapp.model.*;
import sbnz.mrsandman.neuralinkapp.model.enums.SleepPhase;
import sbnz.mrsandman.neuralinkapp.model.events.*;

template "classification-rules"

rule "Categorize Sleep_@{row.rowNumber} - No initial sleep stage"
no-loop true
when
	$s: Sleep(endTime == null)
	Number(intValue >= 100) from accumulate (
		$b: BrainWaveEvent(frequency >= @{minFrequency}, frequency <= @{maxFrequency}),
		count($b)
	)
	not (
		SleepStage()
	)
then
	System.out.println("Aktivacija detekcije faze SleepPhase.@{sleepPhase} without initial stage");
	insert(new SleepStage($s, SleepPhase.@{sleepPhase}, new java.util.Date(drools.getWorkingMemory().getSessionClock().getCurrentTime())));
    insert(new SleepPhaseEvent(SleepPhase.@{sleepPhase}));
    //drools.halt();
end

rule "Categorize Sleep_@{row.rowNumber} - With initial sleep stage"
no-loop true
when
	$s: Sleep(endTime == null)
	$stage: SleepStage(endTime == null, sleep == $s, sleepPhase != SleepPhase.@{sleepPhase})
	Number(intValue >= 100) from accumulate (
		$b: BrainWaveEvent(frequency >= @{minFrequency}, frequency <= @{maxFrequency}),
		count($b)
	)
then
	System.out.println("Aktivacija detekcije faze SleepPhase.@{sleepPhase} with initial stage");
	modify ($stage) {
		setEndTime(new java.util.Date(drools.getWorkingMemory().getSessionClock().getCurrentTime()));
	}
	insert(new SleepStage($s, SleepPhase.@{sleepPhase}, new java.util.Date(drools.getWorkingMemory().getSessionClock().getCurrentTime())));
    insert(new SleepPhaseEvent(SleepPhase.@{sleepPhase}));
    //drools.halt();
end

end template

